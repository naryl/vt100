;;;; vt100.lisp

(in-package #:vt100)

;;; "vt100" goes here. Hacks and glory await!

;;; See http://www.termsys.demon.co.uk/vtansi.htm for reference

;; character codes are stringified, <ESC> replaced with #\Space
;;  {variable} replaced with ~A with variable as an argument
;;  Names are lispified versions of the referred command

;;; Device Status
;;  The following codes are used for reporting terminal/display settings, and vary depending on the implementation:

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun escape (string)
    (substitute #\Escape #\Space string)))
; (escape " a test string")
; "ateststring"

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun args->lambda-list (args)
    (let ((opt (position '&optional args)))
      (if opt
          (append (subseq args 0 (1+ opt))
                  (mapcar (lambda (arg)
                            `(,arg ""))
                          (subseq args (1+ opt)))
                  '((stream *standard-output*)))
          (append args '(&optional (stream *standard-output*))))))
  (defun args->format-list (args)
    (remove '&optional
            (mapcar (lambda (arg)
                      (if (consp arg)
                          (car arg)
                          arg))
                    args))))

(defmacro def-vt100-command (name string args doc)
  `(progn (defun ,name ,(args->lambda-list args)
            ,doc
            (format stream ,(escape string) ,@(args->format-list args)))))

(defmacro make-vt100-commands (&rest command-list)
  `(progn
     ,@(mapcar (lambda (command)
                `(def-vt100-command ,@command))
              command-list)))

(make-vt100-commands

 ;; Device Status
 ;; The following codes are used for reporting terminal/display settings, and vary depending on the implementation: 
 (query-device-code " [c" () "Requests a Report Device Code response from the device.")
 (report-device-code " [~A0c" (code) "Generated by the device in response to Query Device Code request.")
 (query-device-status " [5n" () "Requests a Report Device Status response from the device.")
 (report-device-ok " [0n" () "Generated by the device in response to a Query Device Status request; indicates that device is functioning correctly.")
 (report-device-failure " [3n" () "Generated by the device in response to a Query Device Status request; indicates that device is functioning improperly.")
 (query-cursor-position " [6n" () "Requests a Report Cursor Position response from the device.")
 (report-cursor-position " [~A;~AR" (ROW COLUMN) "Generated by the device in response to a Query Cursor Position request; reports current cursor position.")

 ;; Terminal Setup
 ;; The h and l codes are used for setting terminal/display mode, and vary depending on the implementation. Line Wrap is one of the few setup codes that tend to be used consistently:

 (reset-device " c" () "Reset all terminal settings to default.")
 (enable-line-wrap " [7h" () "Text wraps to next line if longer than the length of the display area.")
 (disable-line-wrap " [7l" () "Disables line wrapping.")

 ;; Fonts
 ;; Some terminals support multiple fonts: normal/bold, swiss/italic, etc. There are a variety of special codes for certain terminals; the following are fairly standard:

 (font-set-g0 " (" () "Set default font.")
 (font-set-g1 " )" () "Set alternate font.")

 ;; Cursor Control

 (cursor-home " [~A;~AH" (&optional ROW COLUMN) "Sets the cursor position where subsequent text will begin. If no row/column parameters are provided (ie. \" [H), the cursor will move to the home position, at the upper left of the screen.\" ()")
 (cursor-up " [~AA" (&optional COUNT) "Moves the cursor up by COUNT rows; the default count is 1.")
 (cursor-down " [~AB" (&optional COUNT) "Moves the cursor down by COUNT rows; the default count is 1.")
 (cursor-forward " [~AC" (&optional COUNT) "Moves the cursor forward by COUNT columns; the default count is 1.")
 (cursor-backward " [~AD" (&optional COUNT) "Moves the cursor backward by COUNT columns; the default count is 1.")
 (force-cursor-position " [~A;~Af" (&optional ROW COLUMN) "Identical to Cursor Home.")
 (save-cursor " [s" () "Save current cursor position.")
 (unsave-cursor " [u" () "Restores cursor position after a Save Cursor.")
 (save-cursor-&-attrs " 7" () "Save current cursor position.")
 (restore-cursor-&-attrs " 8" () "Restores cursor position after a Save Cursor.")

 ;; Scrolling

 (scroll-screen " [r" () "Enable scrolling for entire display.")
 (scroll-screen " [~A;~Ar" (start end) "Enable scrolling from row {start} to row {end}.")
 (scroll-down " D" () "Scroll display down one line.")
 (scroll-up " M" () "Scroll display up one line.")

 ;; Tab Control

 (set-tab " H" () "Sets a tab at the current position.")
 (clear-tab " [g" () "Clears tab at the current position.")
 (clear-all-tabs " [3g" () "Clears all tabs.")

 ;; Erasing Text

 (erase-end-of-line " [K" () "Erases from the current cursor position to the end of the current line.")
 (erase-start-of-line " [1K" () "Erases from the current cursor position to the start of the current line.")
 (erase-line " [2K" () "Erases the entire current line.")
 (erase-down " [J" () "Erases the screen from the current line down to the bottom of the screen.")
 (erase-up " [1J" () "Erases the screen from the current line up to the top of the screen.")
 (erase-screen " [2J" () "Erases the screen with the background colour and moves the cursor to home.")

 ;; Printing
 ;; Some terminals support local printing:

 (print-screen " [i" () "Print the current screen.")
 (print-line " [1i" () "Print the current line.")
 (stop-print-log " [4i" () "Disable log.")
 (start-print-log " [5i" () "Start log; all received text is echoed to a printer.")

 ;; Define Key

 (set-key-definition " [~A;\"~A\"p" (key string) "Associates a string of text to a keyboard key. {key} indicates the key by its ASCII value in decimal."))

;; Set Display Attributes
(defconstant reset-all-attributes 0)
(defconstant bright 1)
(defconstant dim 2)
(defconstant underscore 4)	
(defconstant blink 5)
(defconstant reverse* 7)
(defconstant hidden 8)
(defconstant foreground-black 30)
(defconstant foreground-red 31)
(defconstant foreground-green 32)
(defconstant foreground-yellow 33)
(defconstant foreground-blue 34)
(defconstant foreground-magenta 35)
(defconstant foreground-cyan 36)
(defconstant foreground-white 37)
(defconstant background-black 40)
(defconstant background-red 41)
(defconstant background-green 42)
(defconstant background-yellow 43)
(defconstant background-blue 44)
(defconstant background-magenta 45)
(defconstant background-cyan 46)
(defconstant background-white 47)

(defun set-attribute-mode (&rest rest)
  "Usage: (set-attribute-mode attr1 attr2 ... attrn [optional stream])

Sets multiple display attribute settings. The following lists standard attributes:

    0	Reset all attributes
    1	Bright
    2	Dim
    4	Underscore	
    5	Blink
    7	Reverse
    8	Hidden

    	Foreground Colours
    30	Black
    31	Red
    32	Green
    33	Yellow
    34	Blue
    35	Magenta
    36	Cyan
    37	White

    	Background Colours
    40	Black
    41	Red
    42	Green
    43	Yellow
    44	Blue
    45	Magenta
    46	Cyan
    47	White"
  (let ((format-string (escape " [~{~A~^;~}m")))
    (if (streamp (car (last rest)))
        (format (car (last rest))
                format-string (butlast rest))
        (format t format-string rest))))        ; " [{attr1};...;{attrn}m"


;;; High-level stuff (the one I needed at least)

(defun get-cursor-position ()
  "Only run this in raw-mode. E.g. use the trivial-raw-io library."
  (flet ((ensure-char (c)
           (unless (eql c (read-char))
             (error "Invalid query-cursor-position reply!")))
         (read-int (terminate)
           (let ((result nil))
             (loop :for c := (read-char)
                :until (eql c terminate)
                :do (push c result))
             (parse-integer (coerce (reverse result) 'string)))))
    (vt100:query-cursor-position)
    (finish-output)
    (ensure-char #\Esc)
    (ensure-char #\[)
    (let ((row (read-int #\;))
          (col (read-int #\R)))
      (list row col))))
